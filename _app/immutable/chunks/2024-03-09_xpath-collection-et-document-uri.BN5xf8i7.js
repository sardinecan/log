import{s as Y,n as I}from"./scheduler.DaEglZbh.js";import{S as Z,i as aa,e,s as l,H as U,c as p,k as u,f as o,a as O,l as S,d as s,m as $,g as t}from"./index.B_-7WD2a.js";function na(G){let c,j="Les fonctions XPath collection() et document-uri()",g,i,z="<code>collection()</code>",q,k,B="Renvoie une séquence d’éléments identifiés par une URI, ou une collection par défaut si aucune URI n’est fournie.",b,r,w,J=`<code class="language-xml">collection('.?select=*.xml') <span class="token comment">&lt;!-- retourne une collection de document xml --></span></code>`,H,m,A=`Pour récupérer le nom de chaque fichier, deux fonctions peuvent être utilisées : <code>document-uri()</code> et <code>base-uri()</code>.
voir <a href="https://stackoverflow.com/questions/77325893/document-uri-is-not-working-when-using-collection" rel="nofollow">document-uri() is not working when using collection()</a>.`,L,d,D='<a href="https://www.saxonica.com/documentation12/index.html#!functions/fn/document-uri" rel="nofollow"><code>document-uri()</code></a>',C,f,K="<p>Les documents lus à l’aide de la fonction <code>collection()</code> sont ajoutés au pool de documents (et ont donc une propriété <code>document-uri()</code>) si et seulement si la collection est stable. Dans Saxon, pour des raisons de performance, les collections ne sont pas stables à moins que l’option de configuration <code>STABLE_COLLECTION_URI</code> ne soit activée ou que la stabilité ne soit demandée d’une autre manière, par exemple en incluant le paramètre <code>stable=yes</code> dans l’URI de la collection.</p>",T,x,y,V=`<code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>for-each</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collection('.?select=*.xml<span class="token entity named-entity" title="&amp;">&amp;amp;</span>content-type=application/xml<span class="token entity named-entity" title="&amp;">&amp;amp;</span>stable=yes')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokenize(base-uri(.), '/')[last()]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>substring-before($filename, '.xml')<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>result-document</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output/&#123;$id&#125;.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>apply-templates</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>result-document</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>for-each</span><span class="token punctuation">></span></span></code>`,M,v,N='<a href="https://www.saxonica.com/documentation12/index.html#!functions/fn/base-uri" rel="nofollow"><code>base-uri()</code></a>',E,h,Q="Il n’est pas nécessaire d’avoir une collection stable avec <code>base-uri()</code>.",P,_,R,W=`<code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>for-each</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collection('.?select=*.xml')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokenize(base-uri(.), '/')[last()]<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>substring-before($filename, '.xml')<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>result-document</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output/&#123;$id&#125;.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>apply-templates</span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>result-document</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>for-each</span><span class="token punctuation">></span></span>
</code>`;return{c(){c=e("h1"),c.textContent=j,g=l(),i=e("h2"),i.innerHTML=z,q=l(),k=e("p"),k.textContent=B,b=l(),r=e("pre"),w=new U(!1),H=l(),m=e("p"),m.innerHTML=A,L=l(),d=e("h3"),d.innerHTML=D,C=l(),f=e("blockquote"),f.innerHTML=K,T=l(),x=e("pre"),y=new U(!1),M=l(),v=e("h3"),v.innerHTML=N,E=l(),h=e("p"),h.innerHTML=Q,P=l(),_=e("pre"),R=new U(!1),this.h()},l(a){c=p(a,"H1",{"data-svelte-h":!0}),u(c)!=="svelte-1x6i7fd"&&(c.textContent=j),g=o(a),i=p(a,"H2",{"data-svelte-h":!0}),u(i)!=="svelte-19dgfu"&&(i.innerHTML=z),q=o(a),k=p(a,"P",{"data-svelte-h":!0}),u(k)!=="svelte-i502s2"&&(k.textContent=B),b=o(a),r=p(a,"PRE",{class:!0});var n=O(r);w=S(n,!1),n.forEach(s),H=o(a),m=p(a,"P",{"data-svelte-h":!0}),u(m)!=="svelte-1tj0xqm"&&(m.innerHTML=A),L=o(a),d=p(a,"H3",{"data-svelte-h":!0}),u(d)!=="svelte-17bddup"&&(d.innerHTML=D),C=o(a),f=p(a,"BLOCKQUOTE",{"data-svelte-h":!0}),u(f)!=="svelte-mdxtwr"&&(f.innerHTML=K),T=o(a),x=p(a,"PRE",{class:!0});var X=O(x);y=S(X,!1),X.forEach(s),M=o(a),v=p(a,"H3",{"data-svelte-h":!0}),u(v)!=="svelte-matp2t"&&(v.innerHTML=N),E=o(a),h=p(a,"P",{"data-svelte-h":!0}),u(h)!=="svelte-h5q82w"&&(h.innerHTML=Q),P=o(a),_=p(a,"PRE",{class:!0});var F=O(_);R=S(F,!1),F.forEach(s),this.h()},h(){w.a=null,$(r,"class","language-xml"),y.a=null,$(x,"class","language-xml"),R.a=null,$(_,"class","language-xml")},m(a,n){t(a,c,n),t(a,g,n),t(a,i,n),t(a,q,n),t(a,k,n),t(a,b,n),t(a,r,n),w.m(J,r),t(a,H,n),t(a,m,n),t(a,L,n),t(a,d,n),t(a,C,n),t(a,f,n),t(a,T,n),t(a,x,n),y.m(V,x),t(a,M,n),t(a,v,n),t(a,E,n),t(a,h,n),t(a,P,n),t(a,_,n),R.m(W,_)},p:I,i:I,o:I,d(a){a&&(s(c),s(g),s(i),s(q),s(k),s(b),s(r),s(H),s(m),s(L),s(d),s(C),s(f),s(T),s(x),s(M),s(v),s(E),s(h),s(P),s(_))}}}const ea={title:"Les fonctions collection() et document-uri()",date:"2022-03-09",category:"xpath",author:"jmorvan",keywords:"xpath ; xml"};class pa extends Z{constructor(c){super(),aa(this,c,null,na,Y,{})}}export{pa as default,ea as metadata};
